class Solution {
    public int divide(int dividend, int divisor) {
        if (dividend == 0) return 0;
        if((dividend == -2147483648 )&&(divisor ==-1)) return 2147483647;
        if (divisor == 1) return dividend;
        if (divisor == -1) return changeSignOfNumber(dividend);
        boolean isNegativeResult = isNegativeResult(dividend, divisor);
        int negativeDividend =(dividend>0)?changeSignOfNumber(dividend):dividend;
        int negativeDivisor = (divisor>0)?changeSignOfNumber(divisor):divisor;
        int result = getQuotient(negativeDividend, negativeDivisor);
        if (isNegativeResult) {
            result = changeSignOfNumber(result);
        }
        return result;

    }

    int changeSignOfNumber(int number) {
        return 0 - number;
    }

    int getQuotient(int dividend, int divisor) {
        int result = 0;
        while (dividend <= divisor) {
            dividend = dividend - divisor;
            result = result + 1;

        }
        return result;
    }



    boolean isNegativeResult(int dividend, int divisor) {
        if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) return true;
        return false;
    }

}