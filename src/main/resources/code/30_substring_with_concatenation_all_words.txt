class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<>();
        Map<String, Integer> map = getKeyCountMap(words);


        var substringMap = getIndexesSubStrings(s, map.keySet(), words.length * words[0].length());

        for (Integer index : substringMap.keySet()) {
            if (map.size() == 1) {
                if (substringMap.get(index).equals(words[0].repeat(words.length))){
                    result.add(index);
                }
            } else {
                if (isCombinationAvailable(substringMap.get(index), map, words[0].length())) {
                    result.add(index);
                }
            }

        }


        return result;

    }

    public Map<String, Integer> getKeyCountMap(String[] words) {
        Map<String, Integer> result = new HashMap<>();
        for (String key : words) {
            Integer i = result.containsKey(key) ? result.put(key, result.get(key) + 1) : result.put(key, 1);
        }
        return result;
    }

    public Map<Integer, String> getIndexesSubStrings(String incoming, Set<String> prefixes, Integer length) {
        Map<Integer, String> result = new HashMap<>();
        for (String key : prefixes) {
            int startIndex = 0;
            boolean isPrefixExistsInString = true;
            while (isPrefixExistsInString) {
                int currentIndex = incoming.indexOf(key, startIndex);
                if (currentIndex < 0) {
                    isPrefixExistsInString = false;
                } else {
                    String subString = getSubString(incoming, currentIndex, length);
                    if (subString != null) {
                        result.put(currentIndex, subString);
                    } else {
                        isPrefixExistsInString = false;
                    }
                    startIndex = currentIndex + 1;
                }
            }
        }

        return result;
    }

    public String getSubString(String incoming, int startIndex, int length) {
        try {
            return incoming.substring(startIndex, startIndex + length);

        } catch (IndexOutOfBoundsException ex) {
            return null;
        }
    }

    public Boolean isCombinationAvailable(String substring, Map<String, Integer> wordsForCombination, int partLength) {

        String[] splittedToCheck = substring.split("(?<=\\G.{" + partLength + "})");
        Map<String, Integer> keyCountMapToCheck = getKeyCountMap(splittedToCheck);
        return keyCountMapToCheck.equals(wordsForCombination);
    }
}