class Solution {
     public void solveSudoku(char[][] board) {
        List<PairIndex> listNotFulFilledSquares = getSquaresNotFulfilled(board);
        int notFilledCellsCountPrevious = 9 * 9;
        int notFilledCellsCount = getNotFilledCellsCount(board);
        while (listNotFulFilledSquares.size() > 0 && notFilledCellsCount < notFilledCellsCountPrevious) {
            for (int i = 0; i < listNotFulFilledSquares.size(); i++) {
                board = solveSquare(listNotFulFilledSquares.get(i).i, listNotFulFilledSquares.get(i).j, board);

            }

            listNotFulFilledSquares = getSquaresNotFulfilled(board);
            notFilledCellsCountPrevious = notFilledCellsCount;
            notFilledCellsCount = getNotFilledCellsCount(board);

        }
        if (notFilledCellsCount > 0) {
            List<PairIndex> listNotFulFilledCells = getNotFilledCells(board);
            char[][] boardSolved = solveWithRecursion(0, listNotFulFilledCells.size() - 1, listNotFulFilledCells, board);
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    board[i][j] = boardSolved[i][j];

                }
            }
        }


        System.out.println(Arrays.deepToString(board));

    }

    public char[][] solveWithRecursion(int indexCurrent, int indexLast, List<PairIndex> listNotFulFilledCells, char[][] board) {
        PairIndex pairIndex = listNotFulFilledCells.get(indexCurrent);
        List<Character> notFulFilledChars = getNotFulFilledCharsInLine(board, pairIndex.i);
        PairIndex squareByCell = getSquareByCell(pairIndex);
        List<Character> fullFilledCharsForSquare = getFullFilledCharsForSquare(squareByCell.i, squareByCell.j, board);
        notFulFilledChars.removeAll(fullFilledCharsForSquare);
        for (int i = 0; i < notFulFilledChars.size(); i++) {
            Character tempChar = notFulFilledChars.get(i);
            if (isCharCanBeFilled(pairIndex, tempChar, board)) {
                if (indexCurrent == indexLast) {

                    board[pairIndex.i][pairIndex.j] = tempChar;
                    return board;
                } else {
                    char[][] tempBoard = copyOfBoard(board);
                    tempBoard[pairIndex.i][pairIndex.j] = notFulFilledChars.get(i);
                    tempBoard = solveWithRecursion(indexCurrent + 1, indexLast, listNotFulFilledCells, tempBoard);
                    if (tempBoard != null) return tempBoard;
                }
            }
        }
        return null;
    }

    public PairIndex getSquareByCell(PairIndex cellIndex) {
        PairIndex result = new PairIndex(0, 0);
        result.i = switch (cellIndex.i) {
            case 0, 1, 2 -> 0;
            case 3, 4, 5 -> 3;
            default -> 6;

        };
        result.j = switch (cellIndex.j) {
            case 0, 1, 2 -> 0;
            case 3, 4, 5 -> 3;
            default -> 6;

        };
        return result;

    }

    public List<Character> getNotFulFilledCharsInLine(char[][] board, int lineNumber) {
        List<Character> notFulFilledChars = new ArrayList<>(Arrays.asList('1', '2', '3', '4', '5', '6', '7', '8', '9'));
        List<Character> fulFilledChars = new ArrayList<>();
        for (int i = 0; i < 9; i++) {
            if (board[lineNumber][i] != '.') {
                fulFilledChars.add(board[lineNumber][i]);
            }

        }
        notFulFilledChars.removeAll(fulFilledChars);

        return notFulFilledChars;
    }


    private int getNotFilledCellsCount(char[][] board) {
        int result = 0;
        for (int i = 0; i < 9; i = i + 1) {
            for (int j = 0; j < 9; j = j + 1) {
                if (board[i][j] == '.') {
                    result = result + 1;
                }
            }
        }
        return result;
    }

    public List<PairIndex> getNotFilledCells(char[][] board) {
        List<PairIndex> result = new ArrayList<>();
        for (int i = 0; i < 9; i = i + 1) {
            for (int j = 0; j < 9; j = j + 1) {
                if (board[i][j] == '.') {
                    result.add(new PairIndex(i, j));
                }
            }
        }
        return result;
    }

    public List<PairIndex> getSquaresNotFulfilled(char[][] board) {
        List<PairIndex> result = new ArrayList<>();
        for (int i = 0; i < 9; i = i + 3) {
            for (int j = 0; j < 9; j = j + 3) {
                if (!isSquareFulfilled(i, j, board)) {
                    result.add(new PairIndex(i, j));
                }
            }
        }

        return result;
    }

    class PairIndex {
        int i;
        int j;

        PairIndex(int i, int j) {
            this.i = i;
            this.j = j;
        }
    }

    public boolean isSquareFulfilled(int lineNumber, int columnNumber, char[][] board) {
        boolean result = true;
        for (int i = lineNumber; i < 3 + lineNumber; i++) {
            for (int j = columnNumber; j < 3 + columnNumber; j++) {
                if (board[i][j] == '.') return false;
            }

        }
        return result;
    }

    public char[][] solveSquare(int lineNumber, int columnNumber, char[][] board) {
        List<PairIndex> notFulFilledCells = getNotFullFilledCellsForSquare(lineNumber, columnNumber, board);
        List<Character> notFulFilledChars = getNotFullFilledCharsForSquare(lineNumber, columnNumber, board);
        if (notFulFilledChars.size() == 1) {
            int indexLine = notFulFilledCells.get(0).i;
            int indexColumn = notFulFilledCells.get(0).j;
            board[indexLine][indexColumn] = notFulFilledChars.get(0);
            return board;
        }
        for (int i = 0; i < notFulFilledChars.size(); i++) {
            Character c = notFulFilledChars.get(i);
            List<Integer> applicableIndexes = new ArrayList<>();
            for (int j = 0; j < notFulFilledCells.size(); j++) {
                if (isCharCanBeFilled(notFulFilledCells.get(j), c, board)) {
                    applicableIndexes.add(j);
                }
            }
            //if cell can be filled - set to board
            //remove pair from  notFulFilledCells
            if (applicableIndexes.size() == 1) {
                int indexLine = notFulFilledCells.get(applicableIndexes.get(0)).i;
                int indexColumn = notFulFilledCells.get(applicableIndexes.get(0)).j;
                board[indexLine][indexColumn] = c;
                notFulFilledCells.remove(applicableIndexes.get(0));

            }

        }


        return board;
    }

    public List<PairIndex> getNotFullFilledCellsForSquare(int lineNumber, int columnNumber, char[][] board) {
        List<PairIndex> result = new ArrayList<>();
        for (int i = lineNumber; i < 3 + lineNumber; i++) {
            for (int j = columnNumber; j < 3 + columnNumber; j++) {
                if (board[i][j] == '.') {
                    result.add(new PairIndex(i, j));

                }
            }
        }
        return result;
    }

    public List<Character> getNotFullFilledCharsForSquare(int lineNumber, int columnNumber, char[][] board) {
        List<Character> result = new ArrayList<>(Arrays.asList('1', '2', '3', '4', '5', '6', '7', '8', '9'));
        List<Character> fulFilledChars = new ArrayList<>();
        for (int i = lineNumber; i < 3 + lineNumber; i++) {
            for (int j = columnNumber; j < 3 + columnNumber; j++) {
                if (board[i][j] != '.') {
                    fulFilledChars.add(board[i][j]);

                }
            }
        }
        result.removeAll(fulFilledChars);
        return result;
    }
    public List<Character> getFullFilledCharsForSquare(int lineNumber, int columnNumber, char[][] board) {
        List<Character> result = new ArrayList<>();
        for (int i = lineNumber; i < 3 + lineNumber; i++) {
            for (int j = columnNumber; j < 3 + columnNumber; j++) {
                if (board[i][j] != '.') {
                    result.add(board[i][j]);

                }
            }
        }
        return result;
    }

    boolean isCharCanBeFilled(PairIndex pairIndex, Character character, char[][] board) {
        boolean result = true;
        //check line
        int lineNumber = pairIndex.i;
        for (int i = 0; i < 9; i++) {
            if (board[lineNumber][i] == character) return false;

        }
        //check column
        int columnNumber = pairIndex.j;
        for (int i = 0; i < 9; i++) {
            if (board[i][columnNumber] == character) return false;

        }

        return result;
    }

    public char[][] copyOfBoard(char[][] board) {
        char[][] result = new char[9][9];
        for (int i = 0; i < 9; i++)
            for (int j = 0; j < 9; j++)
                result[i][j] = board[i][j];
        return result;
    }
}